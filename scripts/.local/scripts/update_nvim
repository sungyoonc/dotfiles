#!/usr/bin/env sh

function sort_versions {
    sed 'h; s/[+-]/./g; s/.p\([[:digit:]]\)/.z\1/; s/$/.z/; G; s/\n/ /' |
        LC_ALL=C sort -t. -k 1,1 -k 2,2n -k 3,3n -k 4,4n -k 5,5n | awk '{print $2}'
}

# Fetch all tag names, and get only second column. Then remove all unnecessary characters.
function list_all_versions {
    git ls-remote --heads --tags https://github.com/neovim/neovim.git |
        grep refs/tags/v |
        cut -d '/' -f 3 |
        grep -v '\^{}' |
        grep -v 'untagged' |
        sed -E 's/^(v)([0-9]+\.[0-9]+\.[0-9]+)$/\2/' |
        sort_versions
}

function get_nightly_version {
    git ls-remote --heads --tags https://github.com/neovim/neovim.git nightly | cut -f1
}

function get_latest_version {
    query=$1
    if [ "$query" == "nightly" ]; then
        printf "%s\n" $(get_nightly_version | cut -c 1-9)
    else
        version_list=$(list_all_versions)
        printf "%s\n" $version_list | grep -E "^\s*$query" | tail -1
    fi
}

function get_type {
    echo $1 | grep Build | awk -F ': ' '{print $2}'
}

function get_current_stable_version {
    echo "$1\n" | grep "NVIM" | sed -nE 's/^NVIM v([0-9\.]*)$/\1/p'
}

function get_current_nightly_version {
    echo "$1" | grep 'NVIM' | sed -nE 's/^NVIM v.*\+g([0-9a-f]{9})$/\1/p'
}

function check_nightly_update {
    tool=""
    version_string=""
    if command -v mise >/dev/null 2>&1; then
        tool="mise"
        is_installed=$(mise ls neovim --json | jq '.[] | select(.version=="nightly") | .installed == true')
        if [ "$is_installed" != "true" ]; then
            >&2 echo "Neovim nightly is not installed."
            exit 1
        fi
        version_string=$(mise exec neovim@nightly -- nvim --version)}
    elif command -v asdf >/dev/null 2>&1; then
        tool="asdf"
        version_string=$(ASDF_NEOVIM_VERSION=nightly asdf exec nvim --version)}
        if [ $? -ne 0 ]; then
            >&2 echo "Neovim nightly is not installed."
            exit 1
        fi
    fi

    if [ "$(get_type $version_string)" == "Release" ]; then
        >&2 echo "Not using neovim nightly."
        exit 1
    fi
    current_version=$(get_current_nightly_version "$version_string")
    if [ $? -ne 0 ]; then
        >&2 echo "Failed to get the current neovim version."
        exit 1
    fi
    latest_version=$(get_latest_version "nightly")
    if [ $? -ne 0 ]; then
        >&2 echo "Failed to get the latest version."
        exit 1
    fi

    if [ "$current_version" == "$latest_version" ]; then
        >&2 echo "Neovim nightly is up-to-date."
        exit 0
    fi

    # Show git log (github api is ratelimited)
    if ! "$skip_dialog"; then
        # More about color color and style setting: https://en.wikipedia.org/wiki/ANSI_escape_code#CSI_(Control_Sequence_Introducer)_sequences
        curl -s "https://api.github.com/repos/neovim/neovim/compare/${current_version}...${latest_version}" | jq -r '.commits[] | .commit | (.message |= gsub("\n"; "\n│ ")) | "├╴\u001b[1;32m" + .author.name + "\u001b[0m " + .message' | less -RXF
        # Show yes/no dialog
        printf 'Updating neovim from %s to %s...\n' $current_version $latest_version
        printf 'Proceed with update? [Y/n]: '
        read answer
        if [ "$answer" != "${answer#[Nn]}" ]; then
            exit 1
        fi
    fi

    # Reinstall neovim nightly
    if [ "$tool" == "mise" ]; then
        mise install --force neovim@nightly
    elif [ "$tool" == "asdf" ]; then
        asdf uninstall neovim nightly && asdf install neovim nightly
    fi
    if [ $? -ne 0 ]; then
        >&2 echo "Failed to update neovim nightly."
        exit 1
    fi
    echo "Update complete."

}

print_option_error() {
  cat <<EOF >&2
${name}: invalid option
Try '${name} --help' for more information.
EOF
  exit 1
}

print_usage() {
  cat <<EOF
update_nvim

Updates neovim nightly using mise or asdf

Commands:

 -h, --help                         Print help information.
 -y, --yes                          Answer yes to all confirmation prompts.
EOF
  exit 0
}

# If GNU getopt is not installed
getopt -T 2>&1 >/dev/null
[ $? -eq 4 ] || {
  echo "$name: GNU getopt is required to run this script" >&2
  exit 1
}

opts=$(getopt --name "$name" --options hy --longoptions help,yes -- "$@")
[ $? -eq 0 ] || {
  print_option_error
}

skip_dialog=false

while [ $# -gt 0 ]; do
    case $1 in
        -h|--help)  print_usage ;;
        "-y"|"--yes")   skip_dialog=true; shift ;;
        --)         shift; break ;;
        * )         echo "$name: Couldn't process arguments" >&2; exit 1 ;;
    esac
    # shift
done

check_nightly_update
